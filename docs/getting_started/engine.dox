/**
@page engine_functionality Engine Functionalities and Usage

This page describes the core functionalities of the engine and how to use it effectively. The engine is heavily inspired by the architecture of Godot while being implemented entirely in C, using SDL and OpenGL.

@section overview Overview
The engine provides a flexible and modular game development framework with the following key features:
- **Node-based system**: Inspired by Godot's scene tree, objects in the game world are represented as nodes.
- **Custom scripting system**: Uses a macro-based scripting approach to define behaviors.
- **2D and 3D rendering**: Supports rendering with OpenGL for both 2D sprites and 3D models.
- **Scene management**: Allows seamless scene switching and persistence.
- **Signal system**: Implements a lightweight observer pattern for event handling.
- **Physics and collisions**: Provides a simple but efficient collision detection system.
- **Audio management**: Uses SDL2_Mixer to handle sound effects and music playback.

@section node_system Node System
The engine adopts a node-based hierarchy where every game object is a node. Nodes can be of different types:
- **Node**: The base class for all game objects.
- **ControlFrame**: Specialized for controlling the 2D UI layout.
- **KinematicBody**: Used for objects that are moved by user input or scripts, allowing custom physics.
- **RigidBody**: For objects that are simulated with physics, such as being affected by gravity or collisions.
- **MeshCShape**: Handles 3D mesh-based collision shapes.
- **Camera**: Defines the viewport for rendering.
- **Area**: Used for detecting interactions and physics-based triggers.
- **DirectionalLight**: A type of light that simulates sunlight or other far-distance light sources.
- **Body**: A general class representing a physical object in the game world.
- **PointLight**: A type of light that emits in all directions from a single point.
- **SpotLight**: A focused light source that creates a cone of light.

@section scripting Scripting
Scripts are defined using a macro-based system that enables concise behavior definitions:
@code{.c}
NEW_SCRIPT(my_script)
    GET_READY_PARAMETERS();
    this->position.x += this->speed * delta;
END_SCRIPT(my_script)
@endcode
This allows easy and fast iteration without requiring complex external scripting languages.

@section scene_management Scene Management
Scenes are loaded dynamically using:
@code{.c}
prepare_change_scene("assets/scenes/my_scene.scene");
@endcode
This ensures structured content organization and reusable game environments.

@section signals Signal System
Nodes can emit and receive signals, allowing for event-driven programming:
@code{.c}
GET_SIGNAL();
if (signal == SIGNAL_BUTTON_CLICKED) {
    play_sfx("assets/audio/click.mp3", 50, 0);
}
@endcode
This system improves modularity and decouples logic efficiently.

@section inspiration Inspiration & Credits
This engine is strongly inspired by **Godot Engine**, particularly in its scene graph structure and event-driven architecture.
For reference and further inspiration, visit the official Godot documentation:
- [Godot Docs](https://docs.godotengine.org/)

Credits to:
- The Godot community for their open-source contributions and design philosophies.
- The SDL2 and OpenGL communities for providing the core tools enabling this engine's development.

*/

