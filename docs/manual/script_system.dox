/** 
@page script_system_in_c Script System in C

This document describes the script system in C used to attach behaviors 
to game objects (*Nodes*). It relies on a macro-based structure to define, 
register, and execute scripts dynamically.

@section script_structure Script Structure

A script is defined with `NEW_SCRIPT(name)`, where parameters can be retrieved if needed.  
It is then closed with `END_SCRIPT(name)`, which automatically registers it in the game engine.

@section defining_script Defining a Script

@code{.c}
NEW_SCRIPT(script_name)
    // Script logic
END_SCRIPT(script_name)
@endcode

- **`script_name`**: The script's name, used as an identifier in the engine.
- **Inside**: The logic executed when the `Node` runs this script.

@subsection example_script Example
@code{.c}
NEW_SCRIPT(open_close_menu)
    GET_READY_PARAMETERS();
    if (Game.input->released_keys & KEY_MENU) {
        this->children[0]->flags ^= NODE_ACTIVE | NODE_VISIBLE;
    }
END_SCRIPT(open_close_menu)
@endcode
This script toggles the visibility and activity of the first child node when the `KEY_MENU` is released.

@section retrieving_parameters Retrieving Parameters

Scripts can receive dynamic parameters depending on their execution context.

@subsection delta_parameter Retrieving the Delta Parameter (Elapsed Time)
@code{.c}
GET_READY_PARAMETERS();
@endcode
- **Description**: Stores the elapsed time in seconds (`float delta`), useful for continuous updates.
- **Example**:
  @code{.c}
  GET_READY_PARAMETERS();
  this->position.x += this->speeddelta;
  @endcode

@subsection signal_retrieval Retrieving a Signal
@code{.c}
GET_SIGNAL();
@endcode
- **Description**: Retrieves a signal (`Signal signal`), indicating which event triggered the script.
- **Example**:
  @code{.c}
  GET_SIGNAL();
  if (signal == SIGNAL_BUTTON_CLICKED) {
      play_sfx("assets/audio/sfx/click.wav", 50, 0);
  }
  @endcode

@subsection area_signal_parameters Retrieving Area Signal Parameters
@code{.c}
GET_AREA_SIGNAL_PARAMETERS();
@endcode
- **Description**: Retrieves multiple details about an area collision event:
  - `int sigId`: The signal ID.
  - `Node *other`: Pointer to the other `Node` involved.
  - `float distance`: Distance between the objects.
  - `float *impactPoint`: Pointer to the impact point.
  - `int offset`: Impact offset.
- **Example**:
  @code{.c}
  GET_AREA_SIGNAL_PARAMETERS();
  if (distance < 50.0f) {
      this->hp -= 10;
  }
  @endcode

@section behavior_attributes Behavior Attributes (BehaviorAttribute)

Attributes can be allocated for a `Node` to store data specific to a script.

@code{.c}
SET_ATTRIBUTES_COUNT(x);
@endcode
- **Description**: Allocates `x` attributes inside `this->attribute`, if not already allocated.
- **Example**:
  @code{.c}
  SET_ATTRIBUTES_COUNT(3);
  this->attribute[0].f = 1.5f;  // Stores a float value
  @endcode

@section example_signal Example: Script Responding to Signals
@code{.c}
NEW_SCRIPT(return_to_main_menu)
    GET_SIGNAL();    
    switch (signal) {
        case SIGNAL_BUTTON_CLICKED:
            play_sfx("assets/audio/sfx/button-clicked-sfx.wav", 50, 0);
            prepare_change_scene("assets/scenes/claude_chappe/boot.scene");
            break;
        case SIGNAL_BUTTON_HOVERED:
            play_sfx("assets/audio/sfx/button-hover-sfx.wav", 50, 0);
            break;
        default:
            break;
    }
END_SCRIPT(return_to_main_menu)
@endcode
- This script listens for a signal (`SIGNAL_BUTTON_CLICKED` or `SIGNAL_BUTTON_HOVERED`)  
  and either plays a sound or changes the scene.

@section macro_summary Summary of Used Macros

- `NEW_SCRIPT(name)`: Starts script definition.
- `END_SCRIPT(name)`: Ends and registers the script.
- `GET_READY_PARAMETERS()`: Retrieves `delta` (elapsed time).
- `GET_SIGNAL()`: Retrieves the received signal.
- `GET_AREA_SIGNAL_PARAMETERS()`: Retrieves area collision parameters.
- `SET_ATTRIBUTES_COUNT(x)`: Allocates `x` attributes in `this->attribute`.

This system allows writing modular and reusable behaviors in C while remaining  
simple and efficient.
*/

