#ifdef DEBUG
#include "../io/node_loader.h"
#include "../utils/editor_utils.c"
#include "../io/osio.h"



void load_menu(Window *window, Node *node, Input *input, TTF_Font *font) {

	char path[200];
	if (osio_open_file(path, "\"Scene File(*.scene)\"") == -1) {
		node->parent->params[1].i = 0;
		node->parent->params[3].i = 0;
	}

	FILE * file = fopen(path, "r");
	if (file) {
		load_node_tree(file, node);
		fclose(file);
	}
	node->parent->params[1].i = 0;
	node->parent->params[3].i = 0;


};


void save_menu(Window *window, Node *node, Input *input, TTF_Font *font) {

	char path[200];
	if (osio_save_file(path, "\"Scene File(*.scene)\"") == -1) {
		node->parent->params[1].i = 0;
		node->parent->params[3].i = 0;
	}

	if (path[0]) {
		if (!strstr(path, ".scene")) strcat(path, ".scene");
		FILE * file = fopen(path, "w");
		if (file) {
			node->flags |= NODE_ACTIVE;
			save_node_tree(file, window, node, node->parent, input, font);
			fprintf(file, "Viewport:1\nFramebuffer");
			node->flags &= ~NODE_ACTIVE;
			fclose(file);
		}
	}
	node->parent->params[1].i = 0;
	node->parent->params[3].i = 0;

};


void draw_node_settings(Window *window, Node *node, Input *input, TTF_Font *font) {

	int window_width, window_height;
	get_resolution(&window_width, &window_height);

	update_scene_for_node_editing(window, node, input, font);

	draw_rectangle(window->ui_surface, window_width-64-8, 32-8, 48, 48, 0xff555555);
	if (draw_button(window->ui_surface, window_width-64, 32, 32, 32, "assets/textures/editor/corner-left-up.png", 0xffffffff, input)) {
		node->params[1].i = 1;
		node->params[3].i = 0;
	}
	
	int y = node->params[0].i;
	int x = window_width/2;

	draw_rectangle(window->ui_surface, x-400, y-20, 800, 20, 0xff555555);
	y = draw_node_params(x-400, y, window, node, input, font);
	draw_rectangle(window->ui_surface, x-400, y, 800, 20, 0xff555555);
	y += 20;

	if (input->pressed_keys & KEY_ENTER)
		node->params[3].i = 0;

	if (y < window_height-70) node->params[0].i += ((window_height-70)-y)/20.0;
	if (node->params[0].i > 0) node->params[0].i += (-node->params[0].i)/20.0;

}



void draw_node_editing(Window *window, Node *node, Input *input, TTF_Font *font) {

	int window_width, window_height;
	get_resolution(&window_width, &window_height);

	Node *selectedNode = node->params[2].node;
	int collisionShapeID = update_scene_for_node_editing(window, node, input, font);

	char scriptname[100] = "None";
	for (int i = 0; i < SCRIPTS_COUNT; i++) {
		if (mainNodeTree.scripts[i].script == (*selectedNode->behavior)[BEHAVIOR_SCRIPT_UPDATE]) {
			strcpy(scriptname, mainNodeTree.scripts[i].name);
			break;
		}
			
	}

	draw_rectangle(window->ui_surface, window_width-64-8, 32-8, 48, 48, 0xff555555);
	if (draw_button(window->ui_surface, window_width-64, 32, 32, 32, "assets/textures/editor/corner-left-up.png", 0xffffffff, input)) {
		if (collisionShapeID > -1) node->children[1]->children[collisionShapeID]->flags &= ~NODE_VISIBLE;
		node->params[1].i = 0;
		glm_vec3_zero(node->children[0]->rot);
		glm_vec3_zero(node->children[0]->pos);
		node->params[3].i = 0;
	}

	bool condition;
	METHOD(selectedNode, is_cshape, &condition);
	if (!condition) {
		draw_rectangle(window->ui_surface, window_width-64-8, 32-8+52, 48, 48, 0xff555555);
		if (draw_button(window->ui_surface, window_width-64, 32+52, 32, 32, "assets/textures/editor/settings.png", 0xffffffff, input)) {
			node->params[3].i = 0;
			node->params[1].i = 5;
		}
	}
	
	char str[100];
	int y = window_height/2+100;
	int x = window_width/2;
	int c = 1;

	draw_rectangle(window->ui_surface, x-400, y-20, 800, 200, 0xff555555);
	draw_vec3_input(&c, x-400, y, window, node, selectedNode->pos, input, font, "Position");
	y += 32;
	draw_vec3_input(&c, x-400, y, window, node, selectedNode->rot, input, font, "Rotation");
	y += 32;
	draw_vec3_input(&c, x-400, y, window, node, selectedNode->scale, input, font, "Scale");
	y += 48;

	if (draw_button(window->ui_surface, x-390, y, 32, 32, selectedNode->flags & NODE_VISIBLE ? "assets/textures/editor/eye.png" : "assets/textures/editor/eye-off.png", 0xffffffff, input)) {
		if (selectedNode->flags & NODE_VISIBLE)
			selectedNode->flags &= ~NODE_VISIBLE;
		else
			selectedNode->flags |= NODE_VISIBLE;
	}

	x += 48;

	if (draw_button(window->ui_surface, x-390, y, 32, 32, selectedNode->flags & NODE_ACTIVE ? "assets/textures/editor/active.png" : "assets/textures/editor/unactive.png", 0xffffffff, input)) {
		if (selectedNode->flags & NODE_ACTIVE)
			selectedNode->flags &= ~NODE_ACTIVE;
		else
			selectedNode->flags |= NODE_ACTIVE;
	}

	x += 96;

	draw_text(window->ui_surface, x-390, y, "Script:", font, (SDL_Color) {255, 255, 255, 255}, "lt", -1);
	if (draw_input_box(window->ui_surface, x-230+  0, y-1, 300, 28, 0xffd0d0d0, input))
		node->params[3].i = 10;
	if (node->params[3].i == 10) {
		sprintf(str, "%s", input->inputBuffer);
		sscanf(str, "%s", scriptname);
	} else sprintf(str, "%s", scriptname);
	draw_text(window->ui_surface, x-230, y, str, font, (SDL_Color) {255, 255, 255, 255}, "lt", -1);

	if (input->pressed_keys & KEY_ENTER) {
		if (node->params[3].i == 10) {
			if (!strcmp(scriptname, "None")) {
				selectedNode->flags &= ~NODE_SCRIPT;
				(*selectedNode->behavior)[BEHAVIOR_SCRIPT_UPDATE] = NULL;
			}
			else for (int i = 0; i < SCRIPTS_COUNT; i++) {
				if (!strcmp(mainNodeTree.scripts[i].name, scriptname)) {
					selectedNode->flags |= NODE_SCRIPT;
					(*selectedNode->behavior)[BEHAVIOR_SCRIPT_UPDATE] = mainNodeTree.scripts[i].script;
				}
					
			}
		}
		node->params[3].i = 0;
	}

}

void draw_node_tree(Window *window, Node *node, int level, Input *input, TTF_Font *font) {

	int window_width, window_height;
	get_resolution(&window_width, &window_height);

	static int y;
	static Node *root;
	bool condition;
	int x = 16;
	if (level == 0) {
		y = node->parent->params[0].i;
		root = node;
	}
	int *selectedNodeType = &root->parent->params[4].i;
	y += 32;
    x *= level+1;
	x -= 32;
	int index = index_of_child(node->parent, node);


	draw_rectangle(window->ui_surface, 16, y, 700, 32, 0xff555555);
	if (node != root) if (draw_button(window->ui_surface, x += 32, y, 32, 32, "assets/textures/editor/minus-square.png", 0xffffffff, input)) {
		METHOD(node, is_cshape, &condition);
		if (condition) remove_shape_and_free_and_realloc(node->parent, node);
		else remove_child_and_free_and_realloc(node->parent, node);
		return;
	}
	if (node != root) if (draw_button(window->ui_surface, x += 32, y, 32, 32, "assets/textures/editor/edit.png", 0xffffffff, input)) {
		root->parent->params[1].i = 1;
		root->parent->params[2].node = node;
	}
	METHOD(node, is_cshape, &condition);
	if (!condition && index-1 >= 0 && node != root) if (draw_button(window->ui_surface, x += 32, y, 32, 32, "assets/textures/editor/arrow-up-circle.png", 0xffffffff, input)) {
		Node *moved_node = node->parent->children[index-1];
		node->parent->children[index-1] = node->parent->children[index];
		node->parent->children[index] = moved_node;
	}
	METHOD(node, is_cshape, &condition);
	if (!condition && index+1 < node->parent->length && node != root) if (draw_button(window->ui_surface, x += 32, y, 32, 32, "assets/textures/editor/arrow-down-circle.png", 0xffffffff, input)) {
		Node *moved_node = node->parent->children[index+1];
		node->parent->children[index+1] = node->parent->children[index];
		node->parent->children[index] = moved_node;
	}
	METHOD(node, is_cshape, &condition);
	if (!condition && index+1 < node->parent->length && level) if (draw_button(window->ui_surface, x += 32, y, 32, 32, "assets/textures/editor/corner-down-right.png", 0xffffffff, input)) {
		Node *parent = node->parent;
		remove_child_and_realloc(parent, node);
		add_child_and_realloc(parent->children[index], node);
	}
	METHOD(node, is_cshape, &condition);
	if (!condition && level > 1) if (draw_button(window->ui_surface, x += 32, y, 32, 32, "assets/textures/editor/corner-left-up.png", 0xffffffff, input)) {
		remove_child_and_realloc(node->parent, node);
		add_child_and_realloc(node->parent->parent, node);
		return;
	}
	if (node != root) draw_text(window->ui_surface, x + 16 + 32, y+4, classManager.class_names[node->type], font, (SDL_Color) {255, 255, 255, 255}, "lt", -1);
	else draw_text(window->ui_surface, x + 16 + 32, y+4, "Root", font, (SDL_Color) {255, 255, 255, 255}, "lt", -1);

	u8 *collisionsLength;
	Node ***collisionsShapes;
	GET_FROM_BODY_NODE(node, length, collisionsLength);
	GET_FROM_BODY_NODE(node, collisionsShapes, collisionsShapes);
	METHOD(node, is_body, &condition);
    if (condition) for (int i = 0; i < *collisionsLength; i++) {
        draw_node_tree(window, (*collisionsShapes)[i], level+1, input, font);
    }
    for (int i = 0; i < node->length; i++) {
        draw_node_tree(window, node->children[i], level+1, input, font);
    }
	METHOD(node, is_cshape, &condition);
	if (!condition) {
		y += 32;
		draw_rectangle(window->ui_surface, 16, y, 700, 32, 0xff555555);
		if (draw_button(window->ui_surface, (level+1)*16 + 16, y, 32, 32, "assets/textures/editor/plus-square.png", 0xffffffff, input)) {
			METHOD_TYPE(node, *selectedNodeType, is_cshape, &condition);
			if (condition) {
				METHOD(node, is_body, &condition);
				if (condition) {
					Node *new_node;
					new_node = malloc(sizeof(Node));
					POINTER_CHECK(new_node);

					malloc_node(new_node, *selectedNodeType, 0, 0, 0, 0);
					add_shape_and_realloc(node, new_node);
				}
			} else {
				Node *new_node;
				new_node = malloc(sizeof(Node));
				POINTER_CHECK(new_node);

				malloc_node(new_node, *selectedNodeType, 0, 0, 0, 0);
				add_child_and_realloc(node, new_node);
				buffers.collisionBuffer.collisionsShapes = realloc(buffers.collisionBuffer.collisionsShapes, sizeof(Node *) * buffers.collisionBuffer.length);
				buffers.lightingBuffer.lightings = realloc(buffers.lightingBuffer.lightings, sizeof(Node *) * buffers.lightingBuffer.length);

			}
		}
	}
	if (!level) {
		if (y < window_height-70) node->parent->params[0].i += ((window_height-70)-y)/20.0;
		if (node->parent->params[0].i > 0) node->parent->params[0].i += (-node->parent->params[0].i)/20.0;
		draw_rectangle(window->ui_surface, 450, window_height-100, 750, 60, 0xff999999);
		if (input->pressed_keys & KEY_LEFT) (*selectedNodeType)--;
		if (input->pressed_keys & KEY_RIGHT) (*selectedNodeType)++;
		if (*selectedNodeType < 0) *selectedNodeType = CLASS_TYPE_COUNT-1;
		if (*selectedNodeType >= CLASS_TYPE_COUNT) *selectedNodeType = 0;
		char str[150];
		sprintf(str, " < %s > ", classManager.class_names[*selectedNodeType]);
		draw_text(window->ui_surface, 450, window_height-100+10, str, font, (SDL_Color) {255, 255, 255, 255}, "lt", -1);

		draw_rectangle(window->ui_surface, window_width-64-8, 32-8, 48, 48, 0xff555555);
		if (draw_button(window->ui_surface, window_width-64, 32, 32, 32, "assets/textures/editor/camera.png", 0xffffffff, input)) {
			root->parent->params[1].i = 2;
		}

		draw_rectangle(window->ui_surface, window_width-64-8, 32-8+52, 48, 48, 0xff555555);
		if (draw_button(window->ui_surface, window_width-64, 32+52, 32, 32, "assets/textures/editor/save.png", 0xffffffff, input)) {
			root->parent->params[1].i = 3;
		}

		draw_rectangle(window->ui_surface, window_width-64-8, 32-8+52*2, 48, 48, 0xff555555);
		if (draw_button(window->ui_surface, window_width-64, 32+52*2, 32, 32, "assets/textures/editor/folder.png", 0xffffffff, input)) {
			root->parent->params[1].i = 4;
		}
	}


}

#endif

NEW_SCRIPT(level_editor)
#ifdef DEBUG
	PARAMS_COUNT(6);

	int window_width, window_height;
	get_resolution(&window_width, &window_height);

	int *scrollY = &node->params[0].i;
	int *menu = &node->params[1].i;
	//Node *selectedNode = node->params[2].node;
	//int *selectedInputBox = &node->params[3].i;
	//int *selectedNodeType = &node->params[4].i;
	//Node *activeCamera = node->params[5].node;



	if (input->mouse.active_button) (*scrollY) -= input->mouse.lastY - input->mouse.y;
	(*scrollY) += input->mouse.scroll_y*50.0f;
	
	TTF_Font *font = TTF_OpenFont("assets/fonts/Orbitron-Regular.ttf", 32);
	switch (*menu) {
		case 0:
			if (node->children[0]->params) {
				node->children[0]->params[0].i = 0;
				node->children[0]->params[1].i = 1;
			}
			draw_node_tree(window, node->children[2], 0, input, font);
			break;
		case 1:
			if (node->children[0]->params) {
				node->children[0]->params[0].i = 0;
				node->children[0]->params[1].i = 0;
			}
			draw_node_editing(window, node, input, font);
			break;
		case 2:
			if (node->children[0]->params) {
				node->children[0]->params[0].i = 1;
				node->children[0]->params[1].i = 1;
			}
			draw_rectangle(window->ui_surface, window_width-64-8, 32-8, 48, 48, 0xff555555);
			if (draw_button(window->ui_surface, window_width-64, 32, 32, 32, "assets/textures/editor/corner-left-up.png", 0xffffffff, input)) {
				node->params[1].i = 0;
			}
			break;
		case 3:
			//FILE * file = fopen("assets/scenes/new_scene.scene", "w");
			save_menu(window, node->children[2], input, font);
			//fclose(file);
			break;
		case 4:
			load_menu(window, node->children[2], input, font);
			break;
		case 5:
			if (node->children[0]->params) {
				node->children[0]->params[0].i = 0;
				node->children[0]->params[1].i = 0;
			}
			draw_node_settings(window, node, input, font);
			break;

	}
	TTF_CloseFont(font);
#endif

END_SCRIPT(level_editor)