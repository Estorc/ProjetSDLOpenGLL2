#include <raptiquax.h>
#include <math/math_util.h>
#include <io/model.h>
#include <storage/node.h>
#include <settings.h>
#include <window.h>
#include <gui/frame.h>
#include <storage/queue.h>
#include <scripts/scripts.h>
#include <classes/classes.h>
#include <utils/deferred.h>

#include <storage/hash.h>


NEW_SCRIPT(settings_go_to_main)
    GET_SIGNAL();	
    switch (signal) {
        case SIGNAL_BUTTON_CLICKED:
            play_sfx("assets/audio/sfx/button-clicked-sfx.mp3", 50, 0);
            deferred_load_scene("assets/scenes/settings/main.scene");
            break;
        case SIGNAL_BUTTON_HOVERED:
            play_sfx("assets/audio/sfx/button-hover-sfx.mp3", 50, 0);
            break;
        default:
            break;
    }
END_SCRIPT(settings_go_to_main)

NEW_SCRIPT(settings_go_to_graphics)
    GET_SIGNAL();	
    switch (signal) {
        case SIGNAL_BUTTON_CLICKED:
            play_sfx("assets/audio/sfx/button-clicked-sfx.mp3", 50, 0);
            deferred_load_scene("assets/scenes/settings/graphics.scene");
            break;
        case SIGNAL_BUTTON_HOVERED:
            play_sfx("assets/audio/sfx/button-hover-sfx.mp3", 50, 0);
            break;
        default:
            break;
    }
END_SCRIPT(settings_go_to_graphics)

NEW_SCRIPT(settings_go_to_audio)
    GET_SIGNAL();	
    switch (signal) {
        case SIGNAL_BUTTON_CLICKED:
            play_sfx("assets/audio/sfx/button-clicked-sfx.mp3", 50, 0);
            deferred_load_scene("assets/scenes/settings/audio.scene");
            break;
        case SIGNAL_BUTTON_HOVERED:
            play_sfx("assets/audio/sfx/button-hover-sfx.mp3", 50, 0);
            break;
        default:
            break;
    }
END_SCRIPT(settings_go_to_audio)

NEW_SCRIPT(settings_go_to_keybinds)
    GET_SIGNAL();	
    switch (signal) {
        case SIGNAL_BUTTON_CLICKED:
            play_sfx("assets/audio/sfx/button-clicked-sfx.mp3", 50, 0);
            deferred_load_scene("assets/scenes/settings/keybinds.scene");
            break;
        case SIGNAL_BUTTON_HOVERED:
            play_sfx("assets/audio/sfx/button-hover-sfx.mp3", 50, 0);
            break;
        default:
            break;
    }
END_SCRIPT(settings_go_to_keybinds)

NEW_SCRIPT(st_general_volume)
    float *oldVolume = &this->attribute[0].f;
    if (*oldVolume != Game.settings->master_volume) {
        refresh_music_volume();
    }
    *oldVolume = Game.settings->master_volume;
END_SCRIPT(st_general_volume)

NEW_SCRIPT(st_general_volume_init)
    SET_ATTRIBUTES_COUNT(1);
    Frame *frame = (Frame*) this->object;
    Slider *slider = frame->slider;
    slider->value = &Game.settings->master_volume;
END_SCRIPT(st_general_volume_init)

NEW_SCRIPT(st_music_volume)
    float *oldVolume = &this->attribute[0].f;
    if (*oldVolume != Game.settings->music_volume) {
        refresh_music_volume();
    }
    *oldVolume = Game.settings->music_volume;
END_SCRIPT(st_music_volume)

NEW_SCRIPT(st_music_volume_init)
    SET_ATTRIBUTES_COUNT(1);
    Frame *frame = (Frame*) this->object;
    Slider *slider = frame->slider;
    slider->value = &Game.settings->music_volume;
END_SCRIPT(st_music_volume_init)


NEW_SCRIPT(st_sfx_volume_init)
    Frame *frame = (Frame*) this->object;
    Slider *slider = frame->slider;
    slider->value = &Game.settings->sfx_volume;
END_SCRIPT(st_sfx_volume_init)

NEW_SCRIPT(st_shadows_res)
    float *value = &this->attribute[0].f;
    *value = roundf(*value);
    int oldRes = Game.settings->shadow_resolution;
    Game.settings->shadow_resolution = (256 << (int) *value);

    if (oldRes != Game.settings->shadow_resolution) {
        glBindTexture(GL_TEXTURE_2D_ARRAY, Game.depthMap->texture);
        glTexImage3D(GL_TEXTURE_2D_ARRAY, 0, GL_DEPTH_COMPONENT16,
            Game.settings->shadow_resolution, Game.settings->shadow_resolution,
            NUM_DIRECTIONAL_LIGHTS + NUM_POINT_LIGHTS * 6 + NUM_SPOT_LIGHTS, 0, GL_DEPTH_COMPONENT, GL_FLOAT, NULL);
    }
END_SCRIPT(st_shadows_res)

NEW_SCRIPT(st_shadows_res_init)
    SET_ATTRIBUTES_COUNT(1);
    float *value = &this->attribute[0].f;
    Frame *frame = (Frame*) this->object;
    Slider *slider = frame->slider;
    slider->value = value;
    *value = log2f(Game.settings->shadow_resolution / 256);
END_SCRIPT(st_shadows_res_init)

NEW_SCRIPT(st_shadows_quality)
    float *value = &this->attribute[0].f;
    *value = roundf(*value);
    Game.settings->shadow_quality = (int) *value;
END_SCRIPT(st_shadows_quality)

NEW_SCRIPT(st_shadows_quality_init)
    SET_ATTRIBUTES_COUNT(1);
    float *value = &this->attribute[0].f;
    Frame *frame = (Frame*) this->object;
    Slider *slider = frame->slider;
    slider->value = value;
    *value = Game.settings->shadow_quality;
END_SCRIPT(st_shadows_quality_init)

NEW_SCRIPT(st_textures_quality)
    float *value = &this->attribute[0].f;
    *value = roundf(*value);
    Game.settings->texture_quality = (int) *value;
END_SCRIPT(st_textures_quality)

NEW_SCRIPT(st_textures_quality_init)
    SET_ATTRIBUTES_COUNT(1);
    float *value = &this->attribute[0].f;
    Frame *frame = (Frame*) this->object;
    Slider *slider = frame->slider;
    slider->value = value;
    *value = Game.settings->texture_quality;
END_SCRIPT(st_textures_quality_init)

NEW_SCRIPT(st_smaa_init)
    Frame *frame = (Frame*) this->object;
    Button *button = frame->button;
    button->checked = &Game.settings->antialiasing;
END_SCRIPT(st_smaa_init)

NEW_SCRIPT(st_ssao_init)
    Frame *frame = (Frame*) this->object;
    Button *button = frame->button;
    button->checked = &Game.settings->ssao;
END_SCRIPT(st_ssao_init)

NEW_SCRIPT(st_bloom_init)
    Frame *frame = (Frame*) this->object;
    Button *button = frame->button;
    button->checked = &Game.settings->bloom;
END_SCRIPT(st_bloom_init)

NEW_SCRIPT(st_ssr_init)
    Frame *frame = (Frame*) this->object;
    Button *button = frame->button;
    button->checked = &Game.settings->ssr;
END_SCRIPT(st_ssr_init)

NEW_SCRIPT(st_vsync_init)
    Frame *frame = (Frame*) this->object;
    Button *button = frame->button;
    button->checked = &Game.settings->vsync;
END_SCRIPT(st_vsync_init)

NEW_SCRIPT(st_vsync_signal)
    GET_SIGNAL();	
    switch (signal) {
        case SIGNAL_BUTTON_CLICKED:
            play_sfx("assets/audio/sfx/button-clicked-sfx.mp3", 50, 0);
            if (Game.settings->vsync) {
                SDL_GL_SetSwapInterval(1);
            } else {
                SDL_GL_SetSwapInterval(0);
            }
            break;
        case SIGNAL_BUTTON_HOVERED:
            play_sfx("assets/audio/sfx/button-hover-sfx.mp3", 50, 0);
            break;
        default:
            break;
    }
END_SCRIPT(st_vsync_signal)

NEW_SCRIPT(st_fov)
    Frame *frame = (Frame*) this->object;
    Slider *slider = frame->slider;
    slider->value = &Game.settings->fov;
END_SCRIPT(st_fov)

NEW_SCRIPT(st_camera)
    Camera * camera = this->object;
    camera->fov = Game.settings->fov;
END_SCRIPT(st_camera)

NEW_SCRIPT(st_signal)
    GET_SIGNAL();	
    switch (signal) {
        case SIGNAL_BUTTON_CLICKED:
            play_sfx("assets/audio/sfx/button-clicked-sfx.mp3", 50, 0);
            break;
        case SIGNAL_BUTTON_HOVERED:
            play_sfx("assets/audio/sfx/button-hover-sfx.mp3", 50, 0);
            break;
        default:
            break;
    }
END_SCRIPT(st_signal)

NEW_SCRIPT(settings_return_to_main_menu)
	GET_SIGNAL();	
	switch (signal) {
		case SIGNAL_BUTTON_CLICKED:
			play_sfx("assets/audio/sfx/button-clicked-sfx.mp3", 50, 0);
            char * last_scene = table_get(Game.storage, "Game::last_scene");
			deferred_load_scene(last_scene);
			break;
		case SIGNAL_BUTTON_HOVERED:
			play_sfx("assets/audio/sfx/button-hover-sfx.mp3", 50, 0);
			break;
		default:
			break;
	}
END_SCRIPT(settings_return_to_main_menu)

NEW_SCRIPT(st_show_fps_init)
    Frame *frame = (Frame*) this->object;
    Button *button = (Button*) frame->button;
    button->checked = &Game.settings->show_fps;
END_SCRIPT(st_show_fps_init)

NEW_SCRIPT(st_cast_shadows_init)
    Frame *frame = (Frame*) this->object;
    Button *button = (Button*) frame->button;
    button->checked = &Game.settings->cast_shadows;
END_SCRIPT(st_cast_shadows_init)

NEW_SCRIPT(st_fullscreen_init)
    Frame *frame = (Frame*) this->object;
    Button *button = (Button*) frame->button;
    button->checked = &Game.settings->window_fullscreen;
END_SCRIPT(st_fullscreen_init)

NEW_SCRIPT(st_fullscreen_signal)
    GET_SIGNAL();	
    switch (signal) {
        case SIGNAL_BUTTON_CLICKED:
            play_sfx("assets/audio/sfx/button-clicked-sfx.mp3", 50, 0);
            if (Game.settings->window_fullscreen) {
                SDL_SetWindowFullscreen(Game.window->sdl_window, SDL_WINDOW_FULLSCREEN_DESKTOP);
            } else {
                SDL_SetWindowFullscreen(Game.window->sdl_window, 0);
            }
            break;
        case SIGNAL_BUTTON_HOVERED:
            play_sfx("assets/audio/sfx/button-hover-sfx.mp3", 50, 0);
            break;
        default:
            break;
    }
END_SCRIPT(st_fullscreen_signal)

NEW_SCRIPT(st_res)
	GET_READY_PARAMETERS();
    SET_ATTRIBUTES_COUNT(1);
    int *oldRes = &this->attribute[0].i;

    Frame *frame = (Frame*) this->object;
    SelectList *selectList = frame->selectList;
    selectList->selected = &Game.settings->resolution;
    if (selectList->count == 1 && !(frame->flags & FRAME_NEEDS_REFRESH)) {
        selectList->options = (char (*)[256]) resolutionsText;
        selectList->count = RES_COUNT;
        this::refreshOptions();
    }
    if (*oldRes != Game.settings->resolution) {
        queue_push(Game.callQueue, refresh_resolution);
    }
    *oldRes = Game.settings->resolution;
END_SCRIPT(st_res)

NEW_SCRIPT(st_save)
    GET_SIGNAL();	
    switch (signal) {
        case SIGNAL_BUTTON_CLICKED:
            play_sfx("assets/audio/sfx/button-clicked-sfx.mp3", 50, 0);
            save_settings();
            break;
        case SIGNAL_BUTTON_HOVERED:
            play_sfx("assets/audio/sfx/button-hover-sfx.mp3", 50, 0);
            break;
        default:
            break;
    }
END_SCRIPT(st_save)

NEW_SCRIPT(st_load)
    GET_SIGNAL();	
    switch (signal) {
        case SIGNAL_BUTTON_CLICKED:
            play_sfx("assets/audio/sfx/button-clicked-sfx.mp3", 50, 0);
            load_settings();
            break;
        case SIGNAL_BUTTON_HOVERED:
            play_sfx("assets/audio/sfx/button-hover-sfx.mp3", 50, 0);
            break;
        default:
            break;
    }
END_SCRIPT(st_load)