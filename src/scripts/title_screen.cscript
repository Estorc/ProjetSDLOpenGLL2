NEW_SCRIPT(title_screen_camera)

	node->rot[1] += 1.0f;
	const float distance = 25.0f;
	glm_vec3_copy((vec3) {sin(to_radians(node->rot[1]) + PI)*distance, 5.0f, cos(to_radians(node->rot[1]) + PI)*distance}, node->pos);

END_SCRIPT(title_screen_camera)


NEW_SCRIPT(play_game_button)
	PARAMS_COUNT(1);

	bool *active = &node->params[0].b;

	Frame *frame = (Frame*) node->object;
	Button *button = (Button*) frame->button;

	if (!button->checked) button->checked = active;

	if ((*button->checked)) {
		
		queue_push(&callQueue, change_scene);
		queue_push(&callQueue, &mainNodeTree.root);
		queue_push(&callQueue, "assets/scenes/fpschess.scene");
		queue_push(&callQueue, &mainNodeTree.camera);
		queue_push(&callQueue, mainNodeTree.scripts);
		*button->checked = false;
	}

END_SCRIPT(play_game_button)


NEW_SCRIPT(settings_game_button)
	PARAMS_COUNT(1);

	bool *active = &node->params[0].b;

	Frame *frame = (Frame*) node->object;
	Button *button = (Button*) frame->button;

	if (!button->checked) button->checked = active;

	if ((*button->checked)) {
		
		queue_push(&callQueue, change_scene);
		queue_push(&callQueue, &mainNodeTree.root);
		queue_push(&callQueue, "assets/scenes/settings.scene");
		queue_push(&callQueue, &mainNodeTree.camera);
		queue_push(&callQueue, mainNodeTree.scripts);
		*button->checked = false;
	}

END_SCRIPT(settings_game_button)


NEW_SCRIPT(quit_game_button)
	PARAMS_COUNT(1);


	bool *active = &node->params[0].b;

	Frame *frame = (Frame*) node->object;
	Button *button = (Button*) frame->button;

	if (!button->checked) button->checked = active;

	if ((*button->checked)) {
		
		queue_push(&callQueue, NULL);
		*button->checked = false;
	}

END_SCRIPT(quit_game_button)