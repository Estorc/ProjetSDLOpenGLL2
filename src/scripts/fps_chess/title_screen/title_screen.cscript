#include <raptiquax.h>
#include <math/math_util.h>
#include <storage/node.h>
#include <render/camera.h>
#include <gui/frame.h>
#include <storage/queue.h>
#include <utils/deferred.h>
#include <io/audio.h>
#include <render/lighting.h>
#include <buffer.h>
#include <window.h>
#include <io/socket/socket.h>
#include <classes/classes.h>

#include <storage/hash.h>


#include "../client.h"

NEW_SCRIPT(script_fc_title_screen_init)
	SET_ATTRIBUTES_COUNT(1);
	this->attribute[0].b = false;
	play_music("assets/audio/musics/fps_chess_idle.mp3", MIX_MAX_VOLUME, -1);
END_SCRIPT(script_fc_title_screen_init)

NEW_SCRIPT(script_fc_title_screen_camera)
	GET_READY_PARAMETERS();

	if (Game.mainTree->root->attribute[0].b) {
		Game.window->fadeColor[3] += 1.0f * delta;
		if (Game.window->fadeColor[3] >= 1.0f)
			deferred_load_scene("assets/scenes/fps_chess/server_party.scene");
	} else {
		if (Game.window->fadeColor[3] > 0.0f)
			Game.window->fadeColor[3] -= 1.0f * delta;
	}
	this->rot[1] += 40.0f * delta;
	const float distance = 25.0f;
	glm_vec3_copy((vec3) {sin(to_radians(this->rot[1]))*distance, 5.0f, cos(to_radians(this->rot[1]))*distance}, this->pos);

END_SCRIPT(script_fc_title_screen_camera)


NEW_SCRIPT(script_fc_play_game_button)
	GET_SIGNAL();	
	switch (signal) {
		case SIGNAL_BUTTON_CLICKED:
			play_sfx("assets/audio/sfx/button-clicked-sfx.mp3", 50, 0);
            //((Frame *) this->parent->parent->children[0]->object)->selectArea->text[0];
			//Game.mainTree->root->attribute[0].b = true;
			Game.mainTree->root->children[11]->children[1]->flags &= ~NODE_ACTIVE;
			Game.mainTree->root->children[11]->children[2]->flags |= NODE_ACTIVE;
			Game.mainTree->root->children[11]->children[2]->flags |= NODE_VISIBLE;
			break;
		case SIGNAL_BUTTON_HOVERED:
			play_sfx("assets/audio/sfx/button-hover-sfx.mp3", 50, 0);
			break;
		default:
			break;
	}
END_SCRIPT(script_fc_play_game_button)


NEW_SCRIPT(script_fc_join_game_button)
GET_SIGNAL();	
switch (signal) {
	case SIGNAL_BUTTON_CLICKED:
		play_sfx("assets/audio/sfx/button-clicked-sfx.mp3", 50, 0);
		//((Frame *) this->parent->parent->children[0]->object)->selectArea->text[0];
		//Game.mainTree->root->attribute[0].b = true;
		Frame *frame = this->parent->parent->children[1]->children[0]->object;


		initiate_socket();
		int server_sock = connect_socket_server(frame->inputArea->text, 30000);
		if (server_sock == -1) {
			PRINT_ERROR("Unable to connect to server\n");
			return;
		}
		launch_client(server_sock);

		struct peer *peer = table_get(Game.storage, "socket::server");

		send_message(peer->socket, "lobby", 0);
		send_message(peer->socket, "Hello world!", 0);


		Game.mainTree->root->children[11]->children[2]->flags &= ~NODE_VISIBLE;
		Game.mainTree->root->children[11]->children[2]->flags &= ~NODE_ACTIVE;
		Game.mainTree->root->attribute[0].b = true;
		break;
	case SIGNAL_BUTTON_HOVERED:
		play_sfx("assets/audio/sfx/button-hover-sfx.mp3", 50, 0);
		break;
	default:
		break;
}
END_SCRIPT(script_fc_join_game_button)

NEW_SCRIPT(script_fc_exit_menu)
	GET_SIGNAL();	
	switch (signal) {
		case SIGNAL_BUTTON_CLICKED:
			play_sfx("assets/audio/sfx/button-clicked-sfx.mp3", 50, 0);
			//((Frame *) this->parent->parent->children[0]->object)->selectArea->text[0];
			//Game.mainTree->root->attribute[0].b = true;
			int id = (this->parent->parent->parent->parent)::(int)index_of_child(this->parent->parent->parent);
			this->parent->parent->parent->parent->children[id-1]->flags |= NODE_ACTIVE;
			this->parent->parent->parent->parent->children[id]->flags &= ~NODE_ACTIVE;
			this->parent->parent->parent->parent->children[id]->flags &= ~NODE_VISIBLE;
			break;
		case SIGNAL_BUTTON_HOVERED:
			play_sfx("assets/audio/sfx/button-hover-sfx.mp3", 50, 0);
			break;
		default:
			break;
	}
END_SCRIPT(script_fc_exit_menu)


NEW_SCRIPT(script_fc_settings_game_button)
	GET_SIGNAL();	
	switch (signal) {
		case SIGNAL_BUTTON_CLICKED:
			play_sfx("assets/audio/sfx/button-clicked-sfx.mp3", 50, 0);
			Game.window->fadeColor[3] = 0.0f;
			table_insert(Game.storage, "Game::last_scene", "assets/scenes/fps_chess/boot.scene");
			deferred_load_scene("assets/scenes/settings/main.scene");
			break;
		case SIGNAL_BUTTON_HOVERED:
			play_sfx("assets/audio/sfx/button-hover-sfx.mp3", 50, 0);
			break;
		default:
			break;
	}
END_SCRIPT(script_fc_settings_game_button)


NEW_SCRIPT(script_fc_quit_game_button)
	GET_SIGNAL();	
	switch (signal) {
		case SIGNAL_BUTTON_CLICKED:
			play_sfx("assets/audio/sfx/button-clicked-sfx.mp3", 50, 0);
			queue_push(Game.callQueue, NULL);
			break;
		case SIGNAL_BUTTON_HOVERED:
			play_sfx("assets/audio/sfx/button-hover-sfx.mp3", 50, 0);
			break;
		default:
			break;
	}
END_SCRIPT(script_fc_quit_game_button)