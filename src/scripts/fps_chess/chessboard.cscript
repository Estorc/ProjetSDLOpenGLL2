#include "chessboard.h"

static ChessPieceColor player_color = FC_UNKNOWN;
static ChessPieceColor current_player = FC_WHITE;


static inline void move_piece(Node *** board, int id1, int id2) {
    Node ** p1 = &(*board)[id1];
    Node ** p2 = &(*board)[id2];
    PRINT_INFO("Moving piece\n");
    (*p1)->attribute[1].i = id2;
    (*p1)->attribute[0].i |= FC_MOVED;
    Node * tempPiece = *p1;
    *p1 = *p2;
    *p2 = tempPiece;

    if (current_player == player_color) {
        struct peer *peer = table_get(Game.storage, "socket::server");
        char buffer[128];
        sprintf(buffer, "MOVE_PIECE %d %d", id1, id2);
        send_message(peer->socket, buffer, 0);
    }
}

static inline void begin_fight(Node *** board, int id1, int id2) {
    play_music("assets/audio/musics/fps_chess_battle1.mp3", MIX_MAX_VOLUME, -1);

    char buffer[128];
    for (int i = 0; i < 8*8; i++) {
        sprintf(buffer, "fc_chessboard::piece%d", i);
        Node *piece = (*board)[i];
        table_insert_raw(Game.storage, buffer, NEW_RAW(int, piece->attribute[0].i));
    }

    table_insert_raw(Game.storage, "fc_chessboard::player_id", NEW_RAW(int, id1));
    table_insert_raw(Game.storage, "fc_chessboard::enemy_id", NEW_RAW(int, id2));

    struct peer *peer = table_get(Game.storage, "socket::server");
    remove_message_handling(peer, "P_MSG");
    if (current_player == player_color) {
        sprintf(buffer, "BEGIN_FIGHT %d %d", id2, id1);
        send_message(peer->socket, buffer, 0);
    }

    prepare_change_scene("assets/scenes/fps_chess/play_room_fight.scene");
}

static inline void swap_player() {
    if (current_player == player_color) {
        struct peer *peer = table_get(Game.storage, "socket::server");
        send_message(peer->socket, "SWAP_PLAYER", 0);
    }
    current_player = current_player == FC_WHITE ? FC_BLACK : FC_WHITE;
}

static inline bool has_moved(Node **board, int x, int y) {
    return board[y*8+x]->attribute[0].i & FC_MOVED;
}

static inline bool is_type(Node **board, int x, int y, int type) {
    return (board[y*8+x]->attribute[0].i & 0b1111) == type;
}


static inline bool is_enemy(Node **board, int x, int y, int flags) {
    return (board[y*8+x]->attribute[0].i & 0b110000) != (flags & 0b110000);
}


static inline bool is_cell_empty(Node **board, int x, int y) {
    PRINT_INFO("Checking cell %d %d\n", x, y);
    PRINT_INFO("Piece: %d\n", board[y*8+x]->attribute[0].i & 0b1111);
    return (board[y*8+x]->attribute[0].i & 0b1111) == FC_EMPTY;
}

static inline int move_or_eat(Node **board, int x, int y, int flags) {
    if (is_cell_empty(board, x, y)) {
        return FC_VALID_MOVE;
    } else if (is_enemy(board, x, y, flags)) {
        return FC_ATTACKING;
    }
    return FC_FORBIDDEN;
}


static inline int is_move_valid(Node ***board, int flags, int ox, int oy, int dx, int dy) {
    int sign = (flags & 0b110000) == FC_WHITE ? 1 : -1;
    switch (flags & 0b1111)
    {
    case FC_PAWN:
        if (ox != dx) {
            if (abs(ox - dx) != 1 || (dy - oy) * sign != 1) {
                return FC_FORBIDDEN;
            }
            if (is_enemy(*board, dx, dy, flags)) {
                return FC_ATTACKING;
            }
            return FC_FORBIDDEN;
        }
        if (flags & FC_MOVED) {
            if ((dy - oy) * sign != 1) {
                return FC_FORBIDDEN;
            }
        } else {
            if ((dy - oy) * sign > 2) {
                return FC_FORBIDDEN;
            }
            if ((dy - oy) * sign == 2) {
                if (!is_cell_empty(*board, ox, oy + sign)) {
                    return FC_FORBIDDEN;
                }
            }
        }
        return is_cell_empty(*board, dx, dy) ? FC_VALID_MOVE : FC_FORBIDDEN;
    case FC_ROOK:
        if (ox != dx && oy != dy) {
            return FC_FORBIDDEN;
        }
        int o, d, dir;
        if (ox == dx) {
            o = oy;
            d = dy;
        } else {
            o = ox;
            d = dx;
        }
        dir = o < d ? 1 : -1;
        for (int i = o + dir; i != d; i += dir) {
            if (!is_cell_empty(*board, (ox == dx) ? ox : i, (oy == dy) ? oy : i)) {
                return FC_FORBIDDEN;
            }
        }
        return move_or_eat(*board, dx, dy, flags);
    case FC_KNIGHT:
        if (abs(ox - dx) == 2 && abs(oy - dy) == 1) {
            return move_or_eat(*board, dx, dy, flags);
        } else if (abs(ox - dx) == 1 && abs(oy - dy) == 2) {
            return move_or_eat(*board, dx, dy, flags);
        }
        return FC_FORBIDDEN;
    case FC_BISHOP:
        if (abs(ox - dx) != abs(oy - dy)) {
            return FC_FORBIDDEN;
        }
        int xdir = ox < dx ? 1 : -1;
        int ydir = oy < dy ? 1 : -1;
        int dist = abs(ox - dx);
        for (int i = 1; i < dist; i++) {
            if (!is_cell_empty(*board, ox + i*xdir, oy + i*ydir)) {
                return FC_FORBIDDEN;
            }
        }
        return move_or_eat(*board, dx, dy, flags);

    case FC_QUEEN:
        if (ox == dx || oy == dy) {
            return is_move_valid(board, FC_ROOK | (flags & ~0b1111), ox, oy, dx, dy);
        } else {
            return is_move_valid(board, FC_BISHOP | (flags & ~0b1111), ox, oy, dx, dy);
        }

    case FC_KING:

        /// Castling

        if (abs(ox - dx) == 2 && oy == dy) {
            if (flags & move_or_eat(*board, dx, dy, flags) || flags & FC_MOVED) {
                return FC_FORBIDDEN;
            }
            int rox, rdx;
            if (dx - ox == 2) {
                rox = 7;
                rdx = 5;
            } else if (dx - ox == -2) {
                rox = 0;
                rdx = 3;
            }
            if (is_type(*board, rox, oy, FC_ROOK) && 
                !has_moved(*board, rox, oy) &&
                !is_enemy(*board, rox, oy, flags) &&
                is_move_valid(board, FC_ROOK, rox, oy, rdx, dy) == FC_VALID_MOVE) 
            {
                move_piece(board, oy*8+rox, oy*8+rdx);
                return FC_CASTLING;
            }
            return FC_FORBIDDEN;
        }

        /// Normal move

        if (abs(ox - dx) <= 1 && abs(oy - dy) <= 1) {
            return move_or_eat(*board, dx, dy, flags);
        }
        return FC_FORBIDDEN;


    default:
        return FC_FORBIDDEN;
    }
}

static const int classic_chessboard[64] = {
    FC_ROOK | FC_WHITE, FC_KNIGHT | FC_WHITE, FC_BISHOP | FC_WHITE, FC_QUEEN | FC_WHITE, FC_KING | FC_WHITE, FC_BISHOP | FC_WHITE, FC_KNIGHT | FC_WHITE, FC_ROOK | FC_WHITE,
    FC_PAWN | FC_WHITE, FC_PAWN | FC_WHITE, FC_PAWN | FC_WHITE, FC_PAWN | FC_WHITE, FC_PAWN | FC_WHITE, FC_PAWN | FC_WHITE, FC_PAWN | FC_WHITE, FC_PAWN | FC_WHITE,
    FC_EMPTY, FC_EMPTY, FC_EMPTY, FC_EMPTY, FC_EMPTY, FC_EMPTY, FC_EMPTY, FC_EMPTY,
    FC_EMPTY, FC_EMPTY, FC_EMPTY, FC_EMPTY, FC_EMPTY, FC_EMPTY, FC_EMPTY, FC_EMPTY,
    FC_EMPTY, FC_EMPTY, FC_EMPTY, FC_EMPTY, FC_EMPTY, FC_EMPTY, FC_EMPTY, FC_EMPTY,
    FC_EMPTY, FC_EMPTY, FC_EMPTY, FC_EMPTY, FC_EMPTY, FC_EMPTY, FC_EMPTY, FC_EMPTY,
    FC_PAWN | FC_BLACK, FC_PAWN | FC_BLACK, FC_PAWN | FC_BLACK, FC_PAWN | FC_BLACK, FC_PAWN | FC_BLACK, FC_PAWN | FC_BLACK, FC_PAWN | FC_BLACK, FC_PAWN | FC_BLACK,
    FC_ROOK | FC_BLACK, FC_KNIGHT | FC_BLACK, FC_BISHOP | FC_BLACK, FC_QUEEN | FC_BLACK, FC_KING | FC_BLACK, FC_BISHOP | FC_BLACK, FC_KNIGHT | FC_BLACK, FC_ROOK | FC_BLACK
};

static int get_player_color_callback(int bytes_received, char *msg, void * p, void ** data) {
    PRINT_CLIENT_INFO("Getting player color\n");
    Node *this = data[0];
    msg += strlen("PARTY_GET_SELF_INDEX");
    if (atoi(msg) == 0) {
        player_color = FC_WHITE;
    } else {
        player_color = FC_BLACK;
    }
    if (player_color == FC_BLACK) {
        this->pos[0] *= -1.0f;
        this->rot[1] = 180.0f;
    }
    return 0;
}

NEW_SCRIPT(script_fc_chessboard_player_init)
    SDL_SetRelativeMouseMode(SDL_TRUE);
    struct peer *peer = table_get(Game.storage, "socket::server");

    add_message_handler(peer, "PARTY_GET_SELF_INDEX", get_player_color_callback, 1, 1, (void *[]) {this});
    send_message(peer->socket, "PARTY_GET_SELF_INDEX", 0);

END_SCRIPT(script_fc_chessboard_player_init)

static int get_chessboard_state(int bytes_received, char *msg, void * p, void ** data) {
    Node *chessboard = data[0];
    msg += strlen("P_MSG");
    char *protected_msg = strdup(msg);
    char *user;
    char *content;
    split_user_from_content(protected_msg, &user, &content);

    if (strncmp("MOVE_PIECE", content, 10) == 0) {
        strtok(content, " ");
        int id1 = atoi(strtok(NULL, " "));
        int id2 = atoi(strtok(NULL, " "));
        move_piece(&chessboard->children, id1, id2);
    } else if (strncmp("SWAP_PLAYER", content, 11) == 0) {
        swap_player();
    } else if (strncmp("BEGIN_FIGHT", content, 11) == 0) {
        strtok(content, " ");
        int id1 = atoi(strtok(NULL, " "));
        int id2 = atoi(strtok(NULL, " "));
        begin_fight(&chessboard->children, id1, id2);
    }
    free(protected_msg);
    return 0;
}

NEW_SCRIPT(script_fc_fake_chessboard_init)
    SET_ATTRIBUTES_COUNT((1));
    this->attribute[0].p = this->parent->children[(this->parent)::(int)index_of_child(this)+1];
    Node *chessboard = this->attribute[0].p;
    
    for (int i = 0; i < 8*8; i++) {
        FILE * file = fopen("assets/scenes/fps_chess/pieces/node_piece.scene", "r");
        if (file) {
            Node *piece = load_node(file, NULL, Game.scripts, NULL);
            MALLOC_ATTRIBUTE(piece, 2);
            piece->attribute[0].i = classic_chessboard[i];
            piece->attribute[1].i = i;
            piece->pos[0] = -(((i/8)/8.0f - 0.5f)*8.6f + 0.5f);
            piece->pos[2] = ((i%8)/8.0f - 0.5f)*8.6f + 0.5f;
            set_piece_skin(piece->children[0], piece->attribute[0].i);
            chessboard::add_child_and_realloc(piece);
            fclose(file);
        }
        Game.buffers->collisionBuffer.collisionsShapes = realloc(Game.buffers->collisionBuffer.collisionsShapes, sizeof(Node *) * Game.buffers->collisionBuffer.length);
        Game.buffers->lightingBuffer.lightings = realloc(Game.buffers->lightingBuffer.lightings, sizeof(Node *) * Game.buffers->lightingBuffer.length);
    }
    play_music("assets/audio/musics/fps_chess_idle.mp3", MIX_MAX_VOLUME, -1);
END_SCRIPT(script_fc_fake_chessboard_init)

NEW_SCRIPT(script_fc_chessboard_init)
    SET_ATTRIBUTES_COUNT((4));
    this->attribute[0].p = this->parent->children[(this->parent)::(int)index_of_child(this)+1];
    bool *isHovered = &this->attribute[3].b;
    *isHovered = true;
    Node *chessboard = this->attribute[0].node;

    for (int i = 0; i < 8*8; i++) {
        FILE * file = fopen("assets/scenes/fps_chess/pieces/node_piece.scene", "r");
        if (file) {
            Node *piece = load_node(file, NULL, Game.scripts, NULL);
            MALLOC_ATTRIBUTE(piece, 2);
            piece->attribute[0].i = classic_chessboard[i];
            piece->attribute[1].i = i;
            piece->pos[0] = -(((i/8)/8.0f - 0.5f)*8.6f + 0.5f);
            piece->pos[2] = ((i%8)/8.0f - 0.5f)*8.6f + 0.5f;
            set_piece_skin(piece->children[0], piece->attribute[0].i);
            chessboard::add_child_and_realloc(piece);
            fclose(file);
        }
        Game.buffers->collisionBuffer.collisionsShapes = realloc(Game.buffers->collisionBuffer.collisionsShapes, sizeof(Node *) * Game.buffers->collisionBuffer.length);
        Game.buffers->lightingBuffer.lightings = realloc(Game.buffers->lightingBuffer.lightings, sizeof(Node *) * Game.buffers->lightingBuffer.length);
    }
    struct peer *peer = table_get(Game.storage, "socket::server");
    if (peer)
        add_message_handler(peer, "P_MSG", get_chessboard_state, -1, 1, (void *[]) {chessboard});
    
    play_music("assets/audio/musics/fps_chess_idle.mp3", MIX_MAX_VOLUME, -1);
END_SCRIPT(script_fc_chessboard_init)


NEW_SCRIPT(script_fc_chessboard_signal)
    if (player_color != current_player) return;
    Node ** chessboard = this->attribute[0].node->children;
    int * lastHovered = &this->attribute[1].i;
    int * lastSelected = &this->attribute[2].i;
    bool * isHovered = &this->attribute[3].b;
    *isHovered = true;
    GET_SIGNAL();
    switch (signal) {
        case SIGNAL_AREA_COLLISION:
        {
            GET_AREA_SIGNAL_PARAMETERS();
            int x,y;
            x = 7-(int)((impactPoint[2]/8.6f-0.5f)*-8.0f);
            y = (int)((impactPoint[0]/8.6f-0.5f)*-8.0f);
            //PRINT_INFO("X: %d, Y: %d\n", x, y);
            if (x >= 0 && x < 8 && y >= 0 && y < 8) {
                int index = y*8+x;
                Node *selectedPiece = chessboard[*lastSelected];
                if (selectedPiece && selectedPiece->attribute[0].i & FC_SELECTED) {
                    float_approach(&selectedPiece->pos[0], -(((index/8)/8.0f - 0.5f)*8.6f + 0.5f), 0.1f);
                    float_approach(&selectedPiece->pos[2], ((index%8)/8.0f - 0.5f)*8.6f + 0.5f, 0.1f);
                }
                Node **piece = &chessboard[index];
                if (*piece) {
                    if (Game.input->mouse.released_button == SDL_BUTTON_LEFT) {
                        Node **lastSelectPiece = &chessboard[*lastSelected];
                        if (!((*lastSelectPiece)->attribute[0].i & FC_SELECTED)) lastSelectPiece = NULL;
                        if (*lastSelected != index) {
                            if (lastSelectPiece) {
                                (*lastSelectPiece)->attribute[0].i &= ~FC_SELECTED;
                            }
                        }
                        if ((chessboard[index]->attribute[0].i & 0b110000) == player_color && (chessboard[index]->attribute[0].i & 0b1111) != FC_EMPTY) {
                            play_sfx("assets/audio/sfx/take_piece.wav", MIX_MAX_VOLUME, 0);
                            (*piece)->attribute[0].i ^= FC_SELECTED;
                            *lastSelected = index;
                        } else {
                            MovementState state = is_move_valid(&chessboard, selectedPiece->attribute[0].i, (*lastSelected)%8, (*lastSelected)/8, index%8, index/8);
                            if (state == FC_VALID_MOVE || state == FC_CASTLING) {
                                play_sfx("assets/audio/sfx/place_piece.wav", MIX_MAX_VOLUME, 0);
                                if (lastSelectPiece) {
                                    move_piece(&chessboard, *lastSelected, index);
                                    swap_player();
                                    chessboard[*lastHovered]->attribute[0].i &= ~FC_HOVERED;
                                    return;
                                }
                            }
                            if (state == FC_ATTACKING) {
                                begin_fight(&chessboard, *lastSelected, index);
                            }
                        }
                    }
                    (*piece)->attribute[0].i |= FC_HOVERED;
                }
                if (*lastHovered != index) {
                    if (chessboard[*lastSelected]->attribute[0].i & FC_SELECTED || !is_type(chessboard, index%8, index/8, FC_EMPTY)) {
                        play_sfx("assets/audio/sfx/dragslide.wav", 60, 0);
                    }
                    piece = &chessboard[*lastHovered];
                    if (*piece) {
                        (*piece)->attribute[0].i &= ~FC_HOVERED;
                    }
                }
                *lastHovered = index;
            } else {
                if (*lastHovered != -1) {
                    Node *piece = chessboard[*lastHovered];
                    if (piece) {
                        piece->attribute[0].i &= ~FC_HOVERED;
                    }
                }
            }
            
        }
            break;
        default:
            break;
    }
END_SCRIPT(script_fc_chessboard_signal)


NEW_SCRIPT(script_fc_chessboard_update)
    if (player_color == FC_UNKNOWN) return;
    if (Game.window->fadeColor[3] > 0.0f)
        Game.window->fadeColor[3] -= 0.01f;
    if (player_color != current_player) return;
    Node *chessboard = this->attribute[0].p;
    int * lastHovered = &this->attribute[1].i;
    int * lastSelected = &this->attribute[2].i;
    bool * isHovered = &this->attribute[3].b;
    if (!(*isHovered) && *lastHovered != -1) {
        Node *piece = chessboard->children[*lastHovered];
        if (piece) {
            piece->attribute[0].i &= ~FC_HOVERED;
        }
        piece = chessboard->children[*lastSelected];
        if (piece && Game.input->mouse.released_button == SDL_BUTTON_LEFT) {
            piece->attribute[0].i &= ~FC_SELECTED;
        }
    }
    *isHovered = false;
END_SCRIPT(script_fc_chessboard_update)


NEW_SCRIPT(script_fc_board_piece_update)
    GET_READY_PARAMETERS();
    SET_ATTRIBUTES_COUNT(2);
    int flags = this->attribute[0].i;
    int index = this->attribute[1].i;
    if (flags & FC_SELECTED) {
        float_approach(&this->pos[1], 0.7f, 0.1f);
        float_approach(&this->scale[0], 1.2f, 0.1f);
        float_approach(&this->scale[1], 1.2f, 0.1f);
        float_approach(&this->scale[2], 1.2f, 0.1f);
    } else {
        float_approach(&this->scale[0], 1.0f, 0.1f);
        float_approach(&this->scale[1], 1.0f, 0.1f);
        float_approach(&this->scale[2], 1.0f, 0.1f);
        if (flags & FC_HOVERED) {
            float_approach(&this->pos[1], 0.3f, 0.1f);
        } else {
            float_approach(&this->pos[1], 0.0f, 0.1f);
            float_approach(&this->pos[0], -(((index/8)/8.0f - 0.5f)*8.6f + 0.5f), 0.1f);
            float_approach(&this->pos[2], ((index%8)/8.0f - 0.5f)*8.6f + 0.5f, 0.1f);
        }
    }
END_SCRIPT(script_fc_board_piece_update)