#include "../../../src/io/socket/socket.h"
#include "../../../src/raptiquax.h"
#include "../../../src/storage/hash.h"
#include <pthread.h>

#define MAX_PING 1000000
static int quit = 0;
static int ping = 0;

static int handle_message(int bytes_received, char *msg, void * p, void ** data) {
    struct peer *peer = (struct peer *)p;
    if (strcmp(msg, "PING") == 0) {
        send_message(peer->socket, "PONG", 0);
    } else {
        //PRINT_INFO("Received %d bytes\n", bytes_received);
        //PRINT_SERVER_INFO("%s\n", msg);
    }
    return 0;
}


static void *input_server(void *arg) {
    struct peer *peer = (struct peer *)arg;
    char *msg_buffer = NULL;

    add_message_handler(peer, NULL, handle_message, -1, 0, NULL);

    while (!quit) {
        int bytes_received = receive_message(peer, &msg_buffer, 512, 1000, 0);

        if (bytes_received == -1) {
            if (++ping > MAX_PING) {
                PRINT_CLIENT_INFO("Ping timeout\n");
                quit = 1;
            }
            continue;
        }

        ping = 0;
        if (bytes_received == 0) {
            PRINT_INFO("Server disconnected\n");
            quit = 1;
            break;
        }

        read_messages(bytes_received, msg_buffer, peer);

    }

    free(msg_buffer);
    return NULL;
}


void split_user_from_content(char *msg, char **user, char **content) {
    strtok(msg, "\"");
    *user = strtok(NULL, "\"");
    *content = strtok(NULL, "\"") + 1;
}


void create_party(const char *name) {
    struct peer *peer = table_get(Game.storage, "socket::server");
    char buffer[256];
    sprintf(buffer, "CREATE_PARTY %s", name);

    send_message(peer->socket, buffer, 0);
}

void join_party(int id) {
    struct peer *peer = table_get(Game.storage, "socket::server");
    char buffer[256];
    sprintf(buffer, "JOIN_PARTY %d", id);
    send_message(peer->socket, buffer, 0);
}

void launch_client(int socket) {
    struct peer *peer = create_peer(socket);

    table_insert(Game.storage, "socket::server", peer);

    pthread_t input_thread;
    pthread_create(&input_thread, NULL, input_server, peer);
    pthread_detach(input_thread);
    pthread_join(input_thread, NULL);
}