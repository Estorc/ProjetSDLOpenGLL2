#include <raptiquax.h>
#include <math/math_util.h>
#include <storage/node.h>
#include <render/camera.h>
#include <gui/frame.h>
#include <storage/queue.h>
#include <storage/hash.h>
#include <utils/scene.h>
#include <io/audio.h>
#include <render/lighting.h>
#include <buffer.h>
#include <window.h>
#include <utils/random.h>
#include <utils/deferred.h>
#include <settings.h>
#include <gui/frame.h>

#include <classes/classes.h>

static char text[256];
NEW_SCRIPT(script_cc_level_init)
    SET_ATTRIBUTES_COUNT(7);
    this->attribute[0].b = false; // Lights are off
    play_music("assets/audio/musics/Gameplay (loop).mp3", MIX_MAX_VOLUME, -1);
    table_insert(Game.storage, "Game::level", this);
    deferred_table_get(Game.storage, "Game::tlabel", &this->attribute[1].node);
	this->attribute[2].i = 0;
    this->attribute[4].i = 0;
    this->attribute[5].b = true;
END_SCRIPT(script_cc_level_init)

NEW_SCRIPT(script_cc_level_update)
    GET_READY_PARAMETERS();

    if (Game.window->fadeColor[3] > 0.0f)
        Game.window->fadeColor[3] -= 1.0f * delta;
    if (Game.window->fadeColor[3] < 0.0f)
        Game.window->fadeColor[3] = 0.0f;
    if (Game.window->fadeColor[3] > 1.0f)
        Game.window->fadeColor[3] = 1.0f;

    Node * label = this->attribute[1].node;
    if (!label) return;

    Frame * frame = label->object;

    if (this->attribute[5].b) {
        switch (this->attribute[4].i) {
            case 0:
                sprintf(text, "Chapitre 1 : Que la lumière soit !\n\n - Récupérer la lampe torche");
                break;
            case 1:
                sprintf(text, "Chapitre 2 : La clé perdue !\n\n - Récupérer la clé du serveur principal");
                break;
            default:
                break;
        }
        label->flags |= NODE_ACTIVE;
        label->flags |= NODE_VISIBLE;
        label::set_text(text);
        frame->label->displayLength = 0;
        this->attribute[3].i = strlen(text);
        this->attribute[5].b = false;
        this->attribute[6].i = 10;
    }

    if (frame->label->displayLength < this->attribute[3].i && this->attribute[6].i) {
        if (SDL_GetTicks() - this->attribute[2].i > 50) {
            frame->label->displayLength++;
            frame->flags |= FRAME_NEEDS_REFRESH;
            this->attribute[2].i = SDL_GetTicks();
            
            char sfx[] = "assets/audio/sfx/text/key?.mp3";
            sfx[sizeof(sfx) - 6] = (rand()%3+1) + '0';
            play_sfx(sfx, 80, 0);
        }
    } else if (frame->label->displayLength) {
        if (this->attribute[6].i) {
            if (SDL_GetTicks() - this->attribute[2].i > 50) this->attribute[6].i--;
        } else if (SDL_GetTicks() - this->attribute[2].i > 20) {
            frame->label->displayLength--;
            frame->flags |= FRAME_NEEDS_REFRESH;
            this->attribute[2].i = SDL_GetTicks();
            
            char sfx[] = "assets/audio/sfx/text/key?.mp3";
            sfx[sizeof(sfx) - 6] = (rand()%3+1) + '0';
            play_sfx(sfx, 20, 0);
        }
    }
END_SCRIPT(script_cc_level_update)

NEW_SCRIPT(cc_flickering_light)
    SET_ATTRIBUTES_COUNT(1);
    PointLight * light = this->object;
    if (SDL_GetTicks() - this->attribute[0].i > 100) {
        light->constant = random_float(0.0f, 20.0f);
        this->attribute[0].i = SDL_GetTicks();
        if (random_int(0, 2) == 0) {
            this->flags &= ~NODE_LIGHT_ACTIVE;
        } else {
            this->flags |= NODE_LIGHT_ACTIVE;
        }
    }
END_SCRIPT(cc_flickering_light)

NEW_SCRIPT(cc_level_flickering_light_init)
    SET_ATTRIBUTES_COUNT(2);
    deferred_table_get(Game.storage, "Game::level", &this->attribute[1].node);
END_SCRIPT(cc_level_flickering_light_init)

NEW_SCRIPT(cc_level_flickering_light)
    PointLight * light = this->object;
    if (this->attribute[1].node && this->attribute[1].node->attribute[0].b) {
        if (SDL_GetTicks() - this->attribute[0].i > 100) {
            light->constant = random_float(0.0f, 20.0f);
            this->attribute[0].i = SDL_GetTicks();
            if (random_int(0, 2) == 0) {
                this->flags &= ~NODE_LIGHT_ACTIVE;
            } else {
                this->flags |= NODE_LIGHT_ACTIVE;
            }
        }
    } else {
        this->flags &= ~NODE_LIGHT_ACTIVE;
    }
END_SCRIPT(cc_level_flickering_light)