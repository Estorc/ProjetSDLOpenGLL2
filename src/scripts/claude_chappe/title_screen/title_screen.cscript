#include "../../../raptiquax.h"
#include "../../../math/math_util.h"
#include "../../../storage/node.h"
#include "../../../render/camera.h"
#include "../../../gui/frame.h"
#include "../../../storage/queue.h"
#include "../../../utils/scene.h"
#include "../../../io/audio.h"
#include "../../../render/lighting.h"
#include "../../../buffer.h"
#include "../../../window.h"

#include "../../../storage/hash.h"


NEW_SCRIPT(title_screen_init)
	SET_ATTRIBUTES_COUNT(1);
	this->attribute[0].b = false;
	play_music("assets/audio/musics/Menu (launch) theme 2.mp3", MIX_MAX_VOLUME, -1);
END_SCRIPT(title_screen_init)

NEW_SCRIPT(title_screen_camera)
	GET_READY_PARAMETERS();

	if (Game.mainTree->root->attribute[0].b) {
		Game.window->fadeColor[3] += 1.0f * delta;
		if (Game.window->fadeColor[3] >= 1.0f)
			prepare_change_scene("assets/scenes/claude_chappe/intro.scene");
	} else {
		if (Game.window->fadeColor[3] > 0.0f)
			Game.window->fadeColor[3] -= 1.0f * delta;
	}
	this->rot[1] += 40.0f * delta;
	const float distance = 25.0f;
	glm_vec3_copy((vec3) {sin(to_radians(this->rot[1]))*distance, 5.0f, cos(to_radians(this->rot[1]))*distance}, this->pos);

END_SCRIPT(title_screen_camera)


NEW_SCRIPT(play_game_button)
	GET_SIGNAL();	
	switch (signal) {
		case SIGNAL_BUTTON_CLICKED:
			play_sfx("assets/audio/sfx/button-clicked-sfx.mp3", 50, 0);
			if (Game.input->active_keys & KEY_SPRINT) {
				prepare_change_scene("assets/scenes/fps_chess/fpschess.scene");
			}
			fade_out_music(1000);
			Game.mainTree->root->attribute[0].b = true;
			Game.mainTree->root->children[12]->flags &= ~NODE_ACTIVE;
			break;
		case SIGNAL_BUTTON_HOVERED:
			play_sfx("assets/audio/sfx/button-hover-sfx.mp3", 50, 0);
			break;
		default:
			break;
	}
END_SCRIPT(play_game_button)


NEW_SCRIPT(settings_game_button)
	GET_SIGNAL();	
	switch (signal) {
		case SIGNAL_BUTTON_CLICKED:
			play_sfx("assets/audio/sfx/button-clicked-sfx.mp3", 50, 0);
			Game.window->fadeColor[3] = 0.0f;
			table_insert(Game.storage, "Game::last_scene", "assets/scenes/claude_chappe/boot.scene");
			prepare_change_scene("assets/scenes/settings/main.scene");
			break;
		case SIGNAL_BUTTON_HOVERED:
			play_sfx("assets/audio/sfx/button-hover-sfx.mp3", 50, 0);
			break;
		default:
			break;
	}
END_SCRIPT(settings_game_button)


NEW_SCRIPT(quit_game_button)
	GET_SIGNAL();	
	switch (signal) {
		case SIGNAL_BUTTON_CLICKED:
			play_sfx("assets/audio/sfx/button-clicked-sfx.mp3", 50, 0);
			queue_push(Game.callQueue, NULL);
			break;
		case SIGNAL_BUTTON_HOVERED:
			play_sfx("assets/audio/sfx/button-hover-sfx.mp3", 50, 0);
			break;
		default:
			break;
	}
END_SCRIPT(quit_game_button)