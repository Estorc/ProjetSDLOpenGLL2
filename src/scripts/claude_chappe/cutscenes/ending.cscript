#include <raptiquax.h>
#include <math/math_util.h>
#include <storage/node.h>
#include <render/camera.h>
#include <gui/frame.h>
#include <storage/queue.h>
#include <utils/deferred.h>
#include <io/audio.h>
#include <io/video.h>
#include <render/lighting.h>
#include <buffer.h>
#include <window.h>
#include <io/gltexture_loader.h>

static bool ended_video = false;

static void video_callback() {
    ended_video = true;
}

NEW_SCRIPT(script_cc_ending_video_init)
    SET_ATTRIBUTES_COUNT(3);
    this->attribute[1].b = true;

    if (load_video("assets/video/ending.mp4") < 0) {
        this->attribute[1].b = false;
        PRINT_ERROR("Failed to load video file: %s\n", SDL_GetError());
    }
END_SCRIPT(script_cc_ending_video_init)

NEW_SCRIPT(script_cc_ending_video_update)
    GET_READY_PARAMETERS();
    Frame * frame = this->object;

    if (this->attribute[1].b && frame->contentTexture) {
        play_video_async(&frame->contentTexture, video_callback);
        this->attribute[1].b = false;
    }

    get_last_frame(frame->contentTexture);
    glGenerateMipmap(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, 0);

    if (ended_video) {
        ended_video = false;
        this->attribute[2].b = true;
    }

	if (this->attribute[2].b) {
		Game.window->fadeColor[3] += 1.0f * delta;
		if (Game.window->fadeColor[3] >= 1.0f)
            deferred_load_scene("assets/scenes/claude_chappe/boot.scene");
	} else {
		if (Game.window->fadeColor[3] > 0.0f)
			Game.window->fadeColor[3] -= 1.0f * delta;
	}
END_SCRIPT(script_cc_ending_video_update)