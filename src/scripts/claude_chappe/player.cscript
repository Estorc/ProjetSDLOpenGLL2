#include <raptiquax.h>
#include <io/input.h>
#include <render/camera.h>
#include <storage/node.h>
#include <physics/bodies.h>
#include <scripts/scripts.h>


NEW_SCRIPT(script_cc_player_init)
	SET_ATTRIBUTES_COUNT(3);
	this->attribute[2].b = false; // Player haven't got the flashlight yet
	table_insert(Game.storage, "Game::player", this);
END_SCRIPT(script_cc_player_init)

NEW_SCRIPT(script_cc_player_update)
	GET_READY_PARAMETERS();

	bool *menu_open = &this->attribute[0].b;
	bool *stopped = &this->attribute[1].b;
	if (*stopped) return;

	if (Game.input->released_keys & KEY_MENU) {
		*menu_open = !(*menu_open);
	}

	KinematicBody *player = (KinematicBody*) this->object;

    f32 base_speed = 6.0f;
    if (Game.input->active_keys & KEY_SPRINT) base_speed = 10.0f;
    f32 vel = base_speed * 0.016f;  // Scale speed by delta for frame-rate independence

	Camera *c = (Camera*) this->children[0]->object;

	vec3 dir = {0.0f, 0.0f, -1.0f};
	glm_vec3_rotate(dir, to_radians(c->rot[1]), (vec3){0.0f, 1.0f, 0.0f});
	dir[0] = -dir[0];

	vec3 appliedVelocity;
	glm_vec3_zero(appliedVelocity);

	if (!*menu_open) {
		SDL_SetRelativeMouseMode(SDL_TRUE);

		if (Game.input->active_keys & KEY_LEFT) {
			appliedVelocity[0] += dir[2] * vel;
			appliedVelocity[2] -= dir[0] * vel;
		};
		if (Game.input->active_keys & KEY_RIGHT) {
			appliedVelocity[0] -= dir[2] * vel;
			appliedVelocity[2] += dir[0] * vel;
		};
		if (Game.input->active_keys & KEY_UP) {
			appliedVelocity[0] += dir[0] * vel;
			appliedVelocity[2] += dir[2] * vel;
		};
		if (Game.input->active_keys & KEY_DOWN) {
			appliedVelocity[0] -= dir[0] * vel;
			appliedVelocity[2] -= dir[2] * vel;
		};

		if (Game.input->pressed_keys & KEY_JUMP) {
			player->velocity[1] = 0.2f;
		};

	}

	else SDL_SetRelativeMouseMode(SDL_FALSE);

		
    // Smooth velocity adjustment using delta
    player->velocity[0] += (appliedVelocity[0] - player->velocity[0]) * (delta * 4.0f);
    player->velocity[2] += (appliedVelocity[2] - player->velocity[2]) * (delta * 4.0f);

    // Apply gravity scaled by delta
    player->velocity[1] -= 0.5f * delta;
    //if (Game.input->active_keys & KEY_JUMP) c->targetPos[1] += vel;
	//if (Game.input->active_keys & KEY_CROUCH) c->targetPos[1] -= vel;

END_SCRIPT(script_cc_player_update)


NEW_SCRIPT(script_cc_player_signal)
	KinematicBody *player = (KinematicBody*) this->object;
	bool *menu_open = &this->attribute[0].b;
	bool *stopped = &this->attribute[1].b;
	if (*stopped) return;
	GET_SIGNAL();
	switch(signal) {
		case SIGNAL_AREA_COLLISION:
			GET_AREA_SIGNAL_PARAMETERS();
			switch (sigId)
			{
			case 5:
				play_sfx("assets/audio/sfx/chapper_kill.wav", MIX_MAX_VOLUME, 0);
				*stopped = true;
				*menu_open = true;
				glm_vec3_zero(player->velocity);
				other->parent->attribute[3].i = 2;
				other->parent->attribute[4].node = this->children[0];
				break;

			case 6:
				play_sfx("assets/audio/sfx/drone-attack.mp3", MIX_MAX_VOLUME, 0);
				*stopped = true;
				*menu_open = true;
				glm_vec3_zero(player->velocity);
				other->parent->attribute[3].i = 2;
				other->parent->attribute[4].node = this->children[0];
				break;
			case 7:
				other->parent->pos[1] += 0.01f;
				break;
			
			default:
				break;
			}
			break;
		default:
			break;
	}
END_SCRIPT(script_cc_player_signal)