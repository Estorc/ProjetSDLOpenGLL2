#include <raptiquax.h>
#include <math/math_util.h>
#include <storage/node.h>
#include <render/camera.h>
#include <gui/frame.h>
#include <storage/queue.h>
#include <utils/deferred.h>
#include <io/audio.h>
#include <render/lighting.h>
#include <buffer.h>
#include <window.h>
#include <scripts/scripts.h>


static void play_chapper_idle_animation(Node *this, float *realPos) {
    this->pos[0] = realPos[0];
    this->pos[1] = realPos[1] + sinf(SDL_GetTicks()/100.0f) * 0.3f;
    this->pos[2] = realPos[2];
    this->rot[2] = sinf(SDL_GetTicks()/100.0f) * 0.3f;
    this->rot[0] = sinf(SDL_GetTicks()/100.0f) * 0.3f;
    this->scale[0] = 7.0f + sinf(SDL_GetTicks()/140.0f) * 0.3f;
    this->scale[1] = 7.0f + sinf(SDL_GetTicks()/140.0f) * 0.3f;
    this->scale[2] = 7.0f + sinf(SDL_GetTicks()/140.0f) * 0.3f;

    this->children[0]->children[0]->children[0]->rot[0] = 20.0f + sinf(SDL_GetTicks()/100.0f) * 5.0f;
    this->children[0]->children[0]->children[0]->children[0]->rot[0] = -20.0f + sinf(SDL_GetTicks()/100.0f + PI) * 5.0f;
}

typedef enum ChapperState {
    CHAPPER_STATE_IDLE,
    CHAPPER_STATE_CHASE,
    CHAPPER_STATE_ATTACK,
    CHAPPER_STATE_DEATH
} ChapperState;


NEW_SCRIPT(script_cc_chapper_init)
    SET_ATTRIBUTES_COUNT(8);
    float *realPos = &this->attribute[0].f;
    ChapperState *state = (ChapperState *) &this->attribute[3];
    float *timer = &this->attribute[5].f;
    *timer = 2.0f;
    *state = CHAPPER_STATE_IDLE;
    glm_vec3_copy(this->pos, realPos);
    deferred_table_get(Game.storage, "Game::player", &this->attribute[7].node);
END_SCRIPT(script_cc_chapper_init)

NEW_SCRIPT(script_cc_chapper_update)
    GET_READY_PARAMETERS();
    float *realPos = &this->attribute[0].f;
    ChapperState *state = (ChapperState *) &this->attribute[3];
    Node *camera = this->attribute[4].node;
    float *timer = &this->attribute[5].f;
    float *targetRot;
    vec3 dir;
    switch (*state)
    {
    case CHAPPER_STATE_IDLE:
        play_chapper_idle_animation(this, realPos);
        if ((*timer -= delta) <= 0.0f) {
            *state = CHAPPER_STATE_CHASE;
        }
        break;
    
    case CHAPPER_STATE_CHASE:
        glm_vec3_sub(this->attribute[7].node->globalPos, this->globalPos, dir);
        glm_vec3_normalize(dir);
        realPos[2] += dir[2] * delta * 4.0f;
        realPos[1] += dir[1] * delta * 4.0f;
        realPos[0] += dir[0] * delta * 4.0f;
        float destRot = atan2f(this->attribute[7].node->globalPos[0] - this->globalPos[0],
            this->attribute[7].node->globalPos[2] - this->globalPos[2]) * (180.0f / PI);
        if (this->rot[1] - destRot > 180.0f) {
            this->rot[1] -= 360.0f;
        }
        if (this->rot[1] - destRot < -180.0f) {
            this->rot[1] += 360.0f;
        }
        float_approach(&this->rot[1],
                    destRot,
                    delta * 2.0f);
        play_chapper_idle_animation(this, realPos);
        break;

    case CHAPPER_STATE_ATTACK:
        targetRot = &camera->attribute[0].f;
        ((KinematicBody *) camera->parent->object)->velocity[1] = -0.1f;
        targetRot[0] = 32.0f; // 40.0f
        targetRot[1] = atan2f(camera->globalPos[0] - this->globalPos[0], camera->globalPos[2] - this->globalPos[2]) * (180.0f / PI);
        float_approach(&this->rot[1], targetRot[1], delta * 10.0f);
        float_approach(&this->children[0]->children[0]->children[0]->rot[0], -10.0f, delta * 20.0f);
        float_approach(&this->children[0]->children[0]->children[0]->children[0]->rot[0], -9.0f, delta * 20.0f);
        float_approach(&this->children[0]->children[0]->children[0]->children[0]->children[0]->rot[0], 20.0f, delta * 20.0f);
        
        this->pos[0] += (camera->globalPos[0] - this->globalPos[0]) * 0.3f * delta;
        this->pos[1] += (camera->globalPos[1] - this->globalPos[1]) * 0.3f * delta;
        this->pos[2] += (camera->globalPos[2] - this->globalPos[2]) * 0.3f * delta;

        if (glm_vec3_distance2(this->globalPos, camera->globalPos) < 32.0f) {
            if (Game.window->fadeColor[3] <= 0.0f) Mix_FadeOutMusic(1000);
            if (Game.window->fadeColor[3] < 1.0f) {
                Game.window->fadeColor[3] += 3.0f * delta;
                Game.window->fadeColor[0] += 1.0f * delta;
            }
            if (Game.window->fadeColor[3] >= 1.0f) {
                Game.window->fadeColor[0] -= 1.0f * delta;
            }
            if (Game.window->fadeColor[0] <= 0.0f) {
                deferred_load_scene("assets/scenes/claude_chappe/boot.scene");
                SDL_SetRelativeMouseMode(SDL_FALSE);
            }
        }
        break;

    case CHAPPER_STATE_DEATH:

        break;

    default:
        break;
    }
END_SCRIPT(script_cc_chapper_update)

NEW_SCRIPT(script_cc_chapper_saw)
    GET_READY_PARAMETERS();
    this->rot[1] += 450.0f * delta;
END_SCRIPT(script_cc_chapper_saw)