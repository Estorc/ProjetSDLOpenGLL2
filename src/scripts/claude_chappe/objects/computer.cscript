#include <raptiquax.h>
#include <math/math_util.h>
#include <storage/node.h>
#include <render/camera.h>
#include <gui/frame.h>
#include <storage/queue.h>
#include <storage/hash.h>
#include <utils/scene.h>
#include <io/audio.h>
#include <render/lighting.h>
#include <buffer.h>
#include <window.h>
#include <utils/random.h>
#include <utils/deferred.h>
#include <settings.h>
#include <ekamyl_games/include/main.h>

#include <classes/classes.h>

static char text[256];
NEW_SCRIPT(script_cc_computer_init)
    SET_ATTRIBUTES_COUNT(4);
    deferred_table_get(Game.storage, "Game::alabel", &this->attribute[0].node);
    deferred_table_get(Game.storage, "Game::player", &this->attribute[2].node);
    deferred_table_get(Game.storage, "Game::level", &this->attribute[3].node);
    sprintf(text, "Appuyez sur [%s] pour activer\nla plateforme du hub", SDL_GetKeyName(Game.settings->keybinds.interact));
END_SCRIPT(script_cc_computer_init)

NEW_SCRIPT(script_cc_computer_update)
    Node * label = this->attribute[0].node;
    if (label) {
        label->flags &= ~NODE_ACTIVE;
        label->flags &= ~NODE_VISIBLE;
    }
END_SCRIPT(script_cc_computer_update)

NEW_SCRIPT(script_cc_computer_signal)
    GET_SIGNAL();
    switch (signal) {
        case SIGNAL_AREA_COLLISION:
            GET_AREA_SIGNAL_PARAMETERS();
            if (sigId == 10 && distance < 10.0f) {
                Node * label = this->attribute[0].node;
                if (label) {
                    label->flags |= NODE_ACTIVE;
                    label->flags |= NODE_VISIBLE;
                    label::set_text(text);
                }
                if (Game.input->pressed_keys & KEY_INTERACT) {
                    /*SDL_SetRelativeMouseMode(SDL_FALSE);
                    ekamyl_main();
                    SDL_SetRelativeMouseMode(SDL_TRUE);*/
                    this->parent->children[1]->flags |= NODE_ACTIVE;
                    play_sfx("assets/audio/sfx/circuit-disrupt.mp3", MIX_MAX_VOLUME, 0);
                    play_music("assets/audio/musics/maquette_music_chapper.mp3", MIX_MAX_VOLUME, -1);
                    this->attribute[3].node->attribute[4].i = 3;
                    this->attribute[3].node->attribute[5].b = true;
                    label->flags &= ~NODE_ACTIVE;
                    label->flags &= ~NODE_VISIBLE;
                    this->flags &= ~NODE_ACTIVE;
                    this->flags &= ~NODE_VISIBLE;
                }
            }
            break;
        default:
            break;
    }
END_SCRIPT(script_cc_computer_signal)