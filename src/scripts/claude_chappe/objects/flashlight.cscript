#include <raptiquax.h>
#include <math/math_util.h>
#include <storage/node.h>
#include <render/camera.h>
#include <gui/frame.h>
#include <storage/queue.h>
#include <storage/hash.h>
#include <utils/scene.h>
#include <io/audio.h>
#include <render/lighting.h>
#include <buffer.h>
#include <window.h>
#include <utils/random.h>
#include <utils/deferred.h>
#include <settings.h>

#include <classes/classes.h>


static char text[256];
NEW_SCRIPT(cc_flashlight_init)
	SET_ATTRIBUTES_COUNT(3);
	this->flags &= ~NODE_LIGHT_ACTIVE;
END_SCRIPT(cc_flashlight_init)

NEW_SCRIPT(cc_flashlight_update)
	GET_READY_PARAMETERS();
	SET_ATTRIBUTES_COUNT(3);

	float *targetRot = &this->attribute[0].f;


    if (Game.input->pressed_keys & KEY_FLASHLIGHT && this->parent->attribute[2].b) {
		play_sfx("assets/audio/sfx/flashlight-toggle.wav", MIX_MAX_VOLUME, 0);
        this->flags ^= NODE_LIGHT_ACTIVE;
    }

	glm_vec3_copy(this->parent->children[0]->rot, targetRot);
	glm_vec3_add(targetRot, (vec3){
		sinf(SDL_GetTicks()/1000.0f)*5.0f,
		cosf(SDL_GetTicks()/1000.0f)*5.0f,
		sinf(SDL_GetTicks()/1000.0f)*5.0f
	}, targetRot);
	this->pos[1] = 0.75f;
	this->pos[0] = sinf(to_radians(this->parent->children[0]->rot[1]) + PI/2.0f)*0.75f;
	this->pos[2] = cosf(to_radians(this->parent->children[0]->rot[1]) + PI/2.0f)*0.75f;
	vec3_approach(this->rot, targetRot, (0.1/delta));

END_SCRIPT(cc_flashlight_update)


NEW_SCRIPT(cc_flashlight_prop_init)
	SET_ATTRIBUTES_COUNT(4);
	deferred_table_get(Game.storage, "Game::alabel", &this->attribute[0].node);
	deferred_table_get(Game.storage, "Game::player", &this->attribute[2].node);
	deferred_table_get(Game.storage, "Game::level", &this->attribute[3].node);
	sprintf(text, "[%s] récupérer la lampe torche", SDL_GetKeyName(Game.settings->keybinds.interact));
END_SCRIPT(cc_flashlight_prop_init)

NEW_SCRIPT(cc_flashlight_prop_update)
    Node * label = this->attribute[0].node;
    if (label) {
        label->flags &= ~NODE_ACTIVE;
        label->flags &= ~NODE_VISIBLE;
    }
END_SCRIPT(cc_flashlight_prop_update)


NEW_SCRIPT(cc_flashlight_prop_signal)
	GET_SIGNAL();
	switch (signal) {
		case SIGNAL_AREA_COLLISION:
			GET_AREA_SIGNAL_PARAMETERS();
			if (sigId == 10 && distance < 10.0f) {
				Node * label = this->attribute[0].node;
				if (label) {
					label->flags |= NODE_ACTIVE;
					label->flags |= NODE_VISIBLE;
					label::set_text(text);
				}
				if (Game.input->pressed_keys & KEY_INTERACT) {
					this->flags &= ~NODE_ACTIVE;
					this->flags &= ~NODE_VISIBLE;
					this->children[0]->children[0]->flags &= ~NODE_LIGHT_ACTIVE;
					label->flags &= ~NODE_ACTIVE;
					label->flags &= ~NODE_VISIBLE;
					this->attribute[2].node->attribute[2].b = true;
					this->attribute[2].node->children[1]->flags |= NODE_LIGHT_ACTIVE;
					this->attribute[3].node->attribute[4].i++;
					this->attribute[3].node->attribute[5].b = true;
				}
			}
			break;
		default:
			break;
	}
END_SCRIPT(cc_flashlight_prop_signal)